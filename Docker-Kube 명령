* docker image 생성 (현재 디렉토리 . 에서)
	docker build -t {이미지 이름:타겟} .

* docker 컨테이너 생성
	docker run -it {이미지 이름:타겟} -> 현재 셸에서 실행
	docker run -it -rm {이미지 이름:타겟} -> 현재 셸에서 실행 후 삭제
	docker run -d {이미지 이름:타겟} -> 백에서 돌리고 있기
	docker run -d -p8080:8080 {이미지 이름:타겟} -> 백에서 돌리는데 8080포트에서 8080포트로 연결

1. minikube 시작
	minikube start (--cpus 4 --memory 8096 --disk-size=100g)
	
2. minikube 대시보드 활성화
	minikube dashboard
	
3. namespace(/service/pod) 확인
	kubectl get namespace(/service/pod)
	
4. namespace(/service/pod) 전부 삭제
	kubectl delete namespace(/service/pod) {오브젝트 이름} -> 대상 오브젝트 삭제
	kubectl delete namespace(/service/pod) --all -> 전체 오브젝트 삭제
	
5. yaml로 services & pods 등 생성
	kubectl apply -f {파일 이름.yml} -> 그냥 생성
	kubectl apply -f {파일 이름.yml} - n {네임스페이스 이름} -> 특정 네임스페이스에 생성
	
6. 서비스 배포
	minikube service {서비스 이름} -n {네임스페이스 이름}
	
7. Argo 설치 (https://github.com/argoproj/argo)

	# Download the binary
	curl -sLO https://github.com/argoproj/argo/releases/download/v2.11.0/argo-linux-amd64.gz

	# Unzip
	gunzip argo-linux-amd64.gz

	# Make binary executable
	chmod +x argo-linux-amd64

	# Move binary to path
	mv ./argo-linux-amd64 /usr/local/bin/argo

	# Test installation
	argo version

8. Argo Controller 설치
	kubectl create namespace {네임스페이스 이름}
	kubectl apply -n {네임스페이스 이름} -f https://raw.githubusercontent.com/argoproj/argo/stable/manifests/install.yaml

9. Argo sever (UI) 사용 for locall
	argo server
	
10. Argo sever (UI) 사용을 위한 포트 포워드 for locall Argo Workflow
	kubectl port-forward deployment/argo-server 2746:2746 -n {네임스페이스 이름}
	
11. Service Account 생성
	kubectl create sa {서비스어카운트 이름} -n {네임스페이스 이름}
	
12. Argo에서 Service Account에 admin과 똑같은 권한 주기?
	kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=argo:{서비스어카운트 이름} -n {네임스페이스 이름}

13. pvc 삭제 시 pvc 보호 설정 (Finalizers: [kubernetes.io/pv-protection]) 풀기	
	kubectl -n {네임스페이스 이름} patch pvc {pvc 이름} -p '{"metadata":{"finalizers":null}}'
